(function () {
  'use strict';

  var classCallCheck = function (instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  };

  var createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  var Builder = function () {
      function Builder() {
          classCallCheck(this, Builder);

          this.blocks = [];
      }

      createClass(Builder, [{
          key: 'block',
          value: function block(accessor, controllerFactory) {
              var _this = this;

              var elements = document.querySelectorAll(accessor);
              elements.forEach(function (elem) {
                  var scope = controllerFactory(elem);
                  _this.assignEventListeners(elem, scope);
              });
          }
      }, {
          key: 'assignEventListeners',
          value: function assignEventListeners(element, scope) {
              console.log(element);
              element.querySelectorAll('[bb-click]').forEach(function (elem) {
                  var functionName = elem.getAttribute('bb-click');
                  console.log(elem);
                  console.log(functionName);
                  elem.addEventListener('click', scope[functionName]);
              });
          }
      }]);
      return Builder;
  }();

  window.build = new Builder();

}());
